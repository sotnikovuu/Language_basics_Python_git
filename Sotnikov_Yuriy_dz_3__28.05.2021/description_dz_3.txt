Лекция №3 от 28.05.2021
Домашнее задание

Задание 1
В первом задании создали функцию num_translate() - переводящую числитель от 1 до 10 с английского на русский язык
Функция работает за счет встроеного в нее словаря с нужными значениями.
Вывод обеспечен методом .get, что дает возможность в случае отсутствия нужного значения получить "None"
В данном случае считаю целесообразным использовать словарь и хранить его внутри функции,
    так как задачи использовать его в основном коде нет..

Задание 2
Во втором задании доработал первое задание.
С помощью .isupper() мы определяем с заглавной или строчной буквы начинается входное значение,
    если слово начинается с заглавной то переводим его в строчную с помощью .lower(),
    далее находим значение в словаре с помощью .get и выводим на печать применяя .capitalize()
Если .isupper() == False - то просто ищем значение в словаре и выводим на печать.

Так же стоит отметить что в программу можно добавить еще одну ветку и с помощью.isupper() проверить
    целиком слово на написание заглавными буквами и с помощью .upper() вывести результат заглавными буквами

Задание 3
В данном задании создали функцию принимающая аргумент *args в виде имен сотрудников
    и сортирующего его по алфавиту раскладывая при этом в словари. Для этого запустили цикл while и
    перебрали список имен по порядку, где определили имя и первую букву имени, после чего разложили в словарь.
При этом для имен начинающихся с одинаковых букв добавили ключ и отметку списка в значении,
    после чего добавили значение с помощью .append
Все это сохранили в пустой словарь и вывели на печать

Задание 4
Доработанное 3-е задание. Усложнено форматирование и словарем в словаре по причине добавления Фамилии.
Для решения дополнительно понадобилось определить первую букву фамилии и попорядку разложить в словари
    по аналогии с предыдущем заданием...
Для красивого вывода на печать (вместо 1 строки) применялась функция json, а именно ее метод dumps:
    print(json.dumps(dictionary, ensure_ascii=False, indent=4, sort_keys=True))
    стоит отметить что это позволило вывести словари в несколько строк, а так же появилось возможность
    отсортировать установив флажок в sort_keys=True.

Задание 5
В данном задании реализована функция get_jokes() которая возвращает сгенерированные шутки с аргументами:
    (quantity - кол-во сгенерированных шуток, repetitions - разрешить (True)/ запретить (False) повторять слова)
Так же данная функция была задокументированна в несколько строчек
Для реализации данной задачи был импортирован метод randrange функции random.
Далее через цикл while генерируем для каждого списка значение и добавляем его в пустой список
Что бы реализовать разрешение на повтор слов - добавил ветвление if при истине которого
    удаляем уже использованные значения.
В конце цикла объединяем слова функцией .join и ложим шутку в новый список
